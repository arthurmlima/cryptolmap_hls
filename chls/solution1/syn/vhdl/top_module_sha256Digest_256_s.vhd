-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_module_sha256Digest_256_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nblk_strm2_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    nblk_strm2_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    nblk_strm2_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    nblk_strm2_empty_n : IN STD_LOGIC;
    nblk_strm2_read : OUT STD_LOGIC;
    end_nblk_strm2_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    end_nblk_strm2_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    end_nblk_strm2_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    end_nblk_strm2_empty_n : IN STD_LOGIC;
    end_nblk_strm2_read : OUT STD_LOGIC;
    w_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    w_strm_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    w_strm_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    w_strm_empty_n : IN STD_LOGIC;
    w_strm_read : OUT STD_LOGIC;
    hash_strm_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    hash_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    hash_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    hash_strm_full_n : IN STD_LOGIC;
    hash_strm_write : OUT STD_LOGIC;
    end_hash_strm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    end_hash_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    end_hash_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    end_hash_strm_full_n : IN STD_LOGIC;
    end_hash_strm_write : OUT STD_LOGIC );
end;


architecture behav of top_module_sha256Digest_256_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5BE0CD19 : STD_LOGIC_VECTOR (31 downto 0) := "01011011111000001100110100011001";
    constant ap_const_lv32_1F83D9AB : STD_LOGIC_VECTOR (31 downto 0) := "00011111100000111101100110101011";
    constant ap_const_lv32_9B05688C : STD_LOGIC_VECTOR (31 downto 0) := "10011011000001010110100010001100";
    constant ap_const_lv32_510E527F : STD_LOGIC_VECTOR (31 downto 0) := "01010001000011100101001001111111";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal nblk_strm2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal end_nblk_strm2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln663_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hash_strm_blk_n : STD_LOGIC;
    signal end_hash_strm_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal blk_num_reg_781 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal n_1_fu_309_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_1_reg_789 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal add_ln688_fu_680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln689_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln690_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln691_fu_698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln692_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln693_fu_710_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln694_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln695_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_start : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_done : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_idle : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_ready : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_w_strm_read : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_h_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_h_1_out_ap_vld : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_g_3_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_g_3_out_ap_vld : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_f_3_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_f_3_out_ap_vld : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_e_3_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_e_3_out_ap_vld : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_d_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_d_1_out_ap_vld : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_c_3_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_c_3_out_ap_vld : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_b_3_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_b_3_out_ap_vld : STD_LOGIC;
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_a_3_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_a_3_out_ap_vld : STD_LOGIC;
    signal end_flag_1_reg_158 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_263 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call4 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t3_7_fu_423_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_427_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_437_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t0_7_fu_413_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t3_6_fu_409_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_447_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_457_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t0_6_fu_399_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t3_5_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_467_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_477_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t0_5_fu_385_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t3_4_fu_381_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_487_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_497_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t0_4_fu_371_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t3_3_fu_367_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_507_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_517_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t0_3_fu_357_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t3_2_fu_353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_527_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_537_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t0_2_fu_343_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t3_1_fu_339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_547_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_557_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t0_1_fu_329_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t3_fu_325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_567_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_577_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal t0_fu_315_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_module_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        w_strm_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        w_strm_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        w_strm_empty_n : IN STD_LOGIC;
        w_strm_read : OUT STD_LOGIC;
        h : IN STD_LOGIC_VECTOR (31 downto 0);
        g : IN STD_LOGIC_VECTOR (31 downto 0);
        f : IN STD_LOGIC_VECTOR (31 downto 0);
        e : IN STD_LOGIC_VECTOR (31 downto 0);
        d : IN STD_LOGIC_VECTOR (31 downto 0);
        c : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        h_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        h_1_out_ap_vld : OUT STD_LOGIC;
        g_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        g_3_out_ap_vld : OUT STD_LOGIC;
        f_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        f_3_out_ap_vld : OUT STD_LOGIC;
        e_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        e_3_out_ap_vld : OUT STD_LOGIC;
        d_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        d_1_out_ap_vld : OUT STD_LOGIC;
        c_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_3_out_ap_vld : OUT STD_LOGIC;
        b_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_3_out_ap_vld : OUT STD_LOGIC;
        a_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_3_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274 : component top_module_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_start,
        ap_done => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_done,
        ap_idle => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_idle,
        ap_ready => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_ready,
        w_strm_dout => w_strm_dout,
        w_strm_num_data_valid => ap_const_lv6_0,
        w_strm_fifo_cap => ap_const_lv6_0,
        w_strm_empty_n => w_strm_empty_n,
        w_strm_read => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_w_strm_read,
        h => h_reg_167,
        g => g_reg_179,
        f => f_reg_191,
        e => e_reg_203,
        d => d_reg_215,
        c => c_reg_227,
        b => b_reg_239,
        a => a_reg_251,
        h_1_out => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_h_1_out,
        h_1_out_ap_vld => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_h_1_out_ap_vld,
        g_3_out => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_g_3_out,
        g_3_out_ap_vld => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_g_3_out_ap_vld,
        f_3_out => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_f_3_out,
        f_3_out_ap_vld => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_f_3_out_ap_vld,
        e_3_out => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_e_3_out,
        e_3_out_ap_vld => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_e_3_out_ap_vld,
        d_1_out => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_d_1_out,
        d_1_out_ap_vld => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_d_1_out_ap_vld,
        c_3_out => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_c_3_out,
        c_3_out_ap_vld => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_c_3_out_ap_vld,
        b_3_out => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_b_3_out,
        b_3_out_ap_vld => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_b_3_out_ap_vld,
        a_3_out => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_a_3_out,
        a_3_out_ap_vld => grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_a_3_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_start_reg <= ap_const_logic_0;
            else
                if ((not((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)))) and (icmp_ln663_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_ready = ap_const_logic_1)) then 
                    grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                a_reg_251 <= add_ln688_fu_680_p2;
            elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a_reg_251 <= ap_const_lv32_6A09E667;
            end if; 
        end if;
    end process;

    b_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                b_reg_239 <= add_ln689_fu_686_p2;
            elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_reg_239 <= ap_const_lv32_BB67AE85;
            end if; 
        end if;
    end process;

    c_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_reg_227 <= add_ln690_fu_692_p2;
            elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_reg_227 <= ap_const_lv32_3C6EF372;
            end if; 
        end if;
    end process;

    d_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d_reg_215 <= add_ln691_fu_698_p2;
            elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                d_reg_215 <= ap_const_lv32_A54FF53A;
            end if; 
        end if;
    end process;

    e_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                e_reg_203 <= add_ln692_fu_704_p2;
            elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                e_reg_203 <= ap_const_lv32_510E527F;
            end if; 
        end if;
    end process;

    f_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                f_reg_191 <= add_ln693_fu_710_p2;
            elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                f_reg_191 <= ap_const_lv32_9B05688C;
            end if; 
        end if;
    end process;

    g_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                g_reg_179 <= add_ln694_fu_716_p2;
            elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                g_reg_179 <= ap_const_lv32_1F83D9AB;
            end if; 
        end if;
    end process;

    h_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                h_reg_167 <= add_ln695_fu_722_p2;
            elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_reg_167 <= ap_const_lv32_5BE0CD19;
            end if; 
        end if;
    end process;

    n_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                n_reg_263 <= n_1_reg_789;
            elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                n_reg_263 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                blk_num_reg_781 <= nblk_strm2_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((end_nblk_strm2_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)))) and (icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                end_flag_1_reg_158 <= end_nblk_strm2_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                n_1_reg_789 <= n_1_fu_309_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, nblk_strm2_empty_n, end_nblk_strm2_empty_n, hash_strm_full_n, end_hash_strm_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln663_fu_304_p2, grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_done, end_flag_1_reg_158, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((end_nblk_strm2_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)))) and (icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)))) and (icmp_ln663_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln688_fu_680_p2 <= std_logic_vector(unsigned(grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_a_3_out) + unsigned(a_reg_251));
    add_ln689_fu_686_p2 <= std_logic_vector(unsigned(grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_b_3_out) + unsigned(b_reg_239));
    add_ln690_fu_692_p2 <= std_logic_vector(unsigned(grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_c_3_out) + unsigned(c_reg_227));
    add_ln691_fu_698_p2 <= std_logic_vector(unsigned(grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_d_1_out) + unsigned(d_reg_215));
    add_ln692_fu_704_p2 <= std_logic_vector(unsigned(grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_e_3_out) + unsigned(e_reg_203));
    add_ln693_fu_710_p2 <= std_logic_vector(unsigned(grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_f_3_out) + unsigned(f_reg_191));
    add_ln694_fu_716_p2 <= std_logic_vector(unsigned(grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_g_3_out) + unsigned(g_reg_179));
    add_ln695_fu_722_p2 <= std_logic_vector(unsigned(grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_h_1_out) + unsigned(h_reg_167));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, end_nblk_strm2_empty_n)
    begin
        if (((end_nblk_strm2_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(nblk_strm2_empty_n, end_hash_strm_full_n, end_flag_1_reg_158)
    begin
        if ((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(end_nblk_strm2_empty_n, hash_strm_full_n, end_hash_strm_full_n, icmp_ln663_fu_304_p2)
    begin
        if ((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_done)
    begin
        if ((grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, end_nblk_strm2_empty_n)
    begin
                ap_block_state1 <= ((end_nblk_strm2_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(nblk_strm2_empty_n, end_hash_strm_full_n, end_flag_1_reg_158)
    begin
                ap_block_state2 <= (((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state3_assign_proc : process(end_nblk_strm2_empty_n, hash_strm_full_n, end_hash_strm_full_n, icmp_ln663_fu_304_p2)
    begin
                ap_block_state3 <= (((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)));
    end process;


    ap_block_state3_ignore_call4_assign_proc : process(end_nblk_strm2_empty_n, hash_strm_full_n, end_hash_strm_full_n, icmp_ln663_fu_304_p2)
    begin
                ap_block_state3_ignore_call4 <= (((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, nblk_strm2_empty_n, end_hash_strm_full_n, ap_CS_fsm_state2, end_flag_1_reg_158)
    begin
        if ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(nblk_strm2_empty_n, end_hash_strm_full_n, ap_CS_fsm_state2, end_flag_1_reg_158)
    begin
        if ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    end_hash_strm_blk_n_assign_proc : process(end_hash_strm_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln663_fu_304_p2, end_flag_1_reg_158)
    begin
        if ((((end_flag_1_reg_158 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            end_hash_strm_blk_n <= end_hash_strm_full_n;
        else 
            end_hash_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    end_hash_strm_din_assign_proc : process(nblk_strm2_empty_n, end_nblk_strm2_empty_n, hash_strm_full_n, end_hash_strm_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln663_fu_304_p2, end_flag_1_reg_158)
    begin
        if ((not((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)))) and (icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            end_hash_strm_din <= ap_const_lv1_0;
        elsif ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            end_hash_strm_din <= ap_const_lv1_1;
        else 
            end_hash_strm_din <= "X";
        end if; 
    end process;


    end_hash_strm_write_assign_proc : process(nblk_strm2_empty_n, end_nblk_strm2_empty_n, hash_strm_full_n, end_hash_strm_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln663_fu_304_p2, end_flag_1_reg_158)
    begin
        if (((not((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)))) and (icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            end_hash_strm_write <= ap_const_logic_1;
        else 
            end_hash_strm_write <= ap_const_logic_0;
        end if; 
    end process;


    end_nblk_strm2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, end_nblk_strm2_empty_n, ap_CS_fsm_state3, icmp_ln663_fu_304_p2)
    begin
        if ((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            end_nblk_strm2_blk_n <= end_nblk_strm2_empty_n;
        else 
            end_nblk_strm2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    end_nblk_strm2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, end_nblk_strm2_empty_n, hash_strm_full_n, end_hash_strm_full_n, ap_CS_fsm_state3, icmp_ln663_fu_304_p2)
    begin
        if (((not(((end_nblk_strm2_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)))) and (icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            end_nblk_strm2_read <= ap_const_logic_1;
        else 
            end_nblk_strm2_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_start <= grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_ap_start_reg;

    hash_strm_blk_n_assign_proc : process(hash_strm_full_n, ap_CS_fsm_state3, icmp_ln663_fu_304_p2)
    begin
        if (((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            hash_strm_blk_n <= hash_strm_full_n;
        else 
            hash_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hash_strm_din <= (((((((((((((((((((((((((((((((t3_7_fu_423_p1 & tmp_fu_427_p4) & tmp_1_fu_437_p4) & t0_7_fu_413_p4) & t3_6_fu_409_p1) & tmp_2_fu_447_p4) & tmp_3_fu_457_p4) & t0_6_fu_399_p4) & t3_5_fu_395_p1) & tmp_4_fu_467_p4) & tmp_5_fu_477_p4) & t0_5_fu_385_p4) & t3_4_fu_381_p1) & tmp_6_fu_487_p4) & tmp_7_fu_497_p4) & t0_4_fu_371_p4) & t3_3_fu_367_p1) & tmp_8_fu_507_p4) & tmp_9_fu_517_p4) & t0_3_fu_357_p4) & t3_2_fu_353_p1) & tmp_s_fu_527_p4) & tmp_10_fu_537_p4) & t0_2_fu_343_p4) & t3_1_fu_339_p1) & tmp_11_fu_547_p4) & tmp_12_fu_557_p4) & t0_1_fu_329_p4) & t3_fu_325_p1) & tmp_13_fu_567_p4) & tmp_14_fu_577_p4) & t0_fu_315_p4);

    hash_strm_write_assign_proc : process(end_nblk_strm2_empty_n, hash_strm_full_n, end_hash_strm_full_n, ap_CS_fsm_state3, icmp_ln663_fu_304_p2)
    begin
        if ((not((((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (end_nblk_strm2_empty_n = ap_const_logic_0)) or ((icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (hash_strm_full_n = ap_const_logic_0)))) and (icmp_ln663_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            hash_strm_write <= ap_const_logic_1;
        else 
            hash_strm_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln663_fu_304_p2 <= "1" when (n_reg_263 = blk_num_reg_781) else "0";
    n_1_fu_309_p2 <= std_logic_vector(unsigned(n_reg_263) + unsigned(ap_const_lv64_1));

    nblk_strm2_blk_n_assign_proc : process(nblk_strm2_empty_n, ap_CS_fsm_state2, end_flag_1_reg_158)
    begin
        if (((end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            nblk_strm2_blk_n <= nblk_strm2_empty_n;
        else 
            nblk_strm2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    nblk_strm2_read_assign_proc : process(nblk_strm2_empty_n, end_hash_strm_full_n, ap_CS_fsm_state2, end_flag_1_reg_158)
    begin
        if ((not((((end_flag_1_reg_158 = ap_const_lv1_1) and (end_hash_strm_full_n = ap_const_logic_0)) or ((end_flag_1_reg_158 = ap_const_lv1_0) and (nblk_strm2_empty_n = ap_const_logic_0)))) and (end_flag_1_reg_158 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            nblk_strm2_read <= ap_const_logic_1;
        else 
            nblk_strm2_read <= ap_const_logic_0;
        end if; 
    end process;

    t0_1_fu_329_p4 <= b_reg_239(31 downto 24);
    t0_2_fu_343_p4 <= c_reg_227(31 downto 24);
    t0_3_fu_357_p4 <= d_reg_215(31 downto 24);
    t0_4_fu_371_p4 <= e_reg_203(31 downto 24);
    t0_5_fu_385_p4 <= f_reg_191(31 downto 24);
    t0_6_fu_399_p4 <= g_reg_179(31 downto 24);
    t0_7_fu_413_p4 <= h_reg_167(31 downto 24);
    t0_fu_315_p4 <= a_reg_251(31 downto 24);
    t3_1_fu_339_p1 <= b_reg_239(8 - 1 downto 0);
    t3_2_fu_353_p1 <= c_reg_227(8 - 1 downto 0);
    t3_3_fu_367_p1 <= d_reg_215(8 - 1 downto 0);
    t3_4_fu_381_p1 <= e_reg_203(8 - 1 downto 0);
    t3_5_fu_395_p1 <= f_reg_191(8 - 1 downto 0);
    t3_6_fu_409_p1 <= g_reg_179(8 - 1 downto 0);
    t3_7_fu_423_p1 <= h_reg_167(8 - 1 downto 0);
    t3_fu_325_p1 <= a_reg_251(8 - 1 downto 0);
    tmp_10_fu_537_p4 <= c_reg_227(23 downto 16);
    tmp_11_fu_547_p4 <= b_reg_239(15 downto 8);
    tmp_12_fu_557_p4 <= b_reg_239(23 downto 16);
    tmp_13_fu_567_p4 <= a_reg_251(15 downto 8);
    tmp_14_fu_577_p4 <= a_reg_251(23 downto 16);
    tmp_1_fu_437_p4 <= h_reg_167(23 downto 16);
    tmp_2_fu_447_p4 <= g_reg_179(15 downto 8);
    tmp_3_fu_457_p4 <= g_reg_179(23 downto 16);
    tmp_4_fu_467_p4 <= f_reg_191(15 downto 8);
    tmp_5_fu_477_p4 <= f_reg_191(23 downto 16);
    tmp_6_fu_487_p4 <= e_reg_203(15 downto 8);
    tmp_7_fu_497_p4 <= e_reg_203(23 downto 16);
    tmp_8_fu_507_p4 <= d_reg_215(15 downto 8);
    tmp_9_fu_517_p4 <= d_reg_215(23 downto 16);
    tmp_fu_427_p4 <= h_reg_167(15 downto 8);
    tmp_s_fu_527_p4 <= c_reg_227(15 downto 8);

    w_strm_read_assign_proc : process(grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_w_strm_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_strm_read <= grp_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS_fu_274_w_strm_read;
        else 
            w_strm_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
