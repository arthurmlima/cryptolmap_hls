-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_module_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    w_strm_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    w_strm_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    w_strm_empty_n : IN STD_LOGIC;
    w_strm_read : OUT STD_LOGIC;
    h : IN STD_LOGIC_VECTOR (31 downto 0);
    g : IN STD_LOGIC_VECTOR (31 downto 0);
    f : IN STD_LOGIC_VECTOR (31 downto 0);
    e : IN STD_LOGIC_VECTOR (31 downto 0);
    d : IN STD_LOGIC_VECTOR (31 downto 0);
    c : IN STD_LOGIC_VECTOR (31 downto 0);
    b : IN STD_LOGIC_VECTOR (31 downto 0);
    a : IN STD_LOGIC_VECTOR (31 downto 0);
    h_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    h_1_out_ap_vld : OUT STD_LOGIC;
    g_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    g_3_out_ap_vld : OUT STD_LOGIC;
    f_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    f_3_out_ap_vld : OUT STD_LOGIC;
    e_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    e_3_out_ap_vld : OUT STD_LOGIC;
    d_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_1_out_ap_vld : OUT STD_LOGIC;
    c_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_3_out_ap_vld : OUT STD_LOGIC;
    b_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_3_out_ap_vld : OUT STD_LOGIC;
    a_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of top_module_sha256Digest_256_Pipeline_LOOP_SHA256_UPDATE_64_ROUNDS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_428A2F98 : STD_LOGIC_VECTOR (31 downto 0) := "01000010100010100010111110011000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_71374491 : STD_LOGIC_VECTOR (31 downto 0) := "01110001001101110100010010010001";
    constant ap_const_lv32_B5C0FBCF : STD_LOGIC_VECTOR (31 downto 0) := "10110101110000001111101111001111";
    constant ap_const_lv32_E9B5DBA5 : STD_LOGIC_VECTOR (31 downto 0) := "11101001101101011101101110100101";
    constant ap_const_lv32_3956C25B : STD_LOGIC_VECTOR (31 downto 0) := "00111001010101101100001001011011";
    constant ap_const_lv32_59F111F1 : STD_LOGIC_VECTOR (31 downto 0) := "01011001111100010001000111110001";
    constant ap_const_lv32_923F82A4 : STD_LOGIC_VECTOR (31 downto 0) := "10010010001111111000001010100100";
    constant ap_const_lv32_AB1C5ED5 : STD_LOGIC_VECTOR (31 downto 0) := "10101011000111000101111011010101";
    constant ap_const_lv32_D807AA98 : STD_LOGIC_VECTOR (31 downto 0) := "11011000000001111010101010011000";
    constant ap_const_lv32_12835B01 : STD_LOGIC_VECTOR (31 downto 0) := "00010010100000110101101100000001";
    constant ap_const_lv32_243185BE : STD_LOGIC_VECTOR (31 downto 0) := "00100100001100011000010110111110";
    constant ap_const_lv32_550C7DC3 : STD_LOGIC_VECTOR (31 downto 0) := "01010101000011000111110111000011";
    constant ap_const_lv32_72BE5D74 : STD_LOGIC_VECTOR (31 downto 0) := "01110010101111100101110101110100";
    constant ap_const_lv32_80DEB1FE : STD_LOGIC_VECTOR (31 downto 0) := "10000000110111101011000111111110";
    constant ap_const_lv32_9BDC06A7 : STD_LOGIC_VECTOR (31 downto 0) := "10011011110111000000011010100111";
    constant ap_const_lv32_C19BF174 : STD_LOGIC_VECTOR (31 downto 0) := "11000001100110111111000101110100";
    constant ap_const_lv32_E49B69C1 : STD_LOGIC_VECTOR (31 downto 0) := "11100100100110110110100111000001";
    constant ap_const_lv32_EFBE4786 : STD_LOGIC_VECTOR (31 downto 0) := "11101111101111100100011110000110";
    constant ap_const_lv32_FC19DC6 : STD_LOGIC_VECTOR (31 downto 0) := "00001111110000011001110111000110";
    constant ap_const_lv32_240CA1CC : STD_LOGIC_VECTOR (31 downto 0) := "00100100000011001010000111001100";
    constant ap_const_lv32_2DE92C6F : STD_LOGIC_VECTOR (31 downto 0) := "00101101111010010010110001101111";
    constant ap_const_lv32_4A7484AA : STD_LOGIC_VECTOR (31 downto 0) := "01001010011101001000010010101010";
    constant ap_const_lv32_5CB0A9DC : STD_LOGIC_VECTOR (31 downto 0) := "01011100101100001010100111011100";
    constant ap_const_lv32_76F988DA : STD_LOGIC_VECTOR (31 downto 0) := "01110110111110011000100011011010";
    constant ap_const_lv32_983E5152 : STD_LOGIC_VECTOR (31 downto 0) := "10011000001111100101000101010010";
    constant ap_const_lv32_A831C66D : STD_LOGIC_VECTOR (31 downto 0) := "10101000001100011100011001101101";
    constant ap_const_lv32_B00327C8 : STD_LOGIC_VECTOR (31 downto 0) := "10110000000000110010011111001000";
    constant ap_const_lv32_BF597FC7 : STD_LOGIC_VECTOR (31 downto 0) := "10111111010110010111111111000111";
    constant ap_const_lv32_C6E00BF3 : STD_LOGIC_VECTOR (31 downto 0) := "11000110111000000000101111110011";
    constant ap_const_lv32_D5A79147 : STD_LOGIC_VECTOR (31 downto 0) := "11010101101001111001000101000111";
    constant ap_const_lv32_6CA6351 : STD_LOGIC_VECTOR (31 downto 0) := "00000110110010100110001101010001";
    constant ap_const_lv32_14292967 : STD_LOGIC_VECTOR (31 downto 0) := "00010100001010010010100101100111";
    constant ap_const_lv32_27B70A85 : STD_LOGIC_VECTOR (31 downto 0) := "00100111101101110000101010000101";
    constant ap_const_lv32_2E1B2138 : STD_LOGIC_VECTOR (31 downto 0) := "00101110000110110010000100111000";
    constant ap_const_lv32_4D2C6DFC : STD_LOGIC_VECTOR (31 downto 0) := "01001101001011000110110111111100";
    constant ap_const_lv32_53380D13 : STD_LOGIC_VECTOR (31 downto 0) := "01010011001110000000110100010011";
    constant ap_const_lv32_650A7354 : STD_LOGIC_VECTOR (31 downto 0) := "01100101000010100111001101010100";
    constant ap_const_lv32_766A0ABB : STD_LOGIC_VECTOR (31 downto 0) := "01110110011010100000101010111011";
    constant ap_const_lv32_81C2C92E : STD_LOGIC_VECTOR (31 downto 0) := "10000001110000101100100100101110";
    constant ap_const_lv32_92722C85 : STD_LOGIC_VECTOR (31 downto 0) := "10010010011100100010110010000101";
    constant ap_const_lv32_A2BFE8A1 : STD_LOGIC_VECTOR (31 downto 0) := "10100010101111111110100010100001";
    constant ap_const_lv32_A81A664B : STD_LOGIC_VECTOR (31 downto 0) := "10101000000110100110011001001011";
    constant ap_const_lv32_C24B8B70 : STD_LOGIC_VECTOR (31 downto 0) := "11000010010010111000101101110000";
    constant ap_const_lv32_C76C51A3 : STD_LOGIC_VECTOR (31 downto 0) := "11000111011011000101000110100011";
    constant ap_const_lv32_D192E819 : STD_LOGIC_VECTOR (31 downto 0) := "11010001100100101110100000011001";
    constant ap_const_lv32_D6990624 : STD_LOGIC_VECTOR (31 downto 0) := "11010110100110010000011000100100";
    constant ap_const_lv32_F40E3585 : STD_LOGIC_VECTOR (31 downto 0) := "11110100000011100011010110000101";
    constant ap_const_lv32_106AA070 : STD_LOGIC_VECTOR (31 downto 0) := "00010000011010101010000001110000";
    constant ap_const_lv32_19A4C116 : STD_LOGIC_VECTOR (31 downto 0) := "00011001101001001100000100010110";
    constant ap_const_lv32_1E376C08 : STD_LOGIC_VECTOR (31 downto 0) := "00011110001101110110110000001000";
    constant ap_const_lv32_2748774C : STD_LOGIC_VECTOR (31 downto 0) := "00100111010010000111011101001100";
    constant ap_const_lv32_34B0BCB5 : STD_LOGIC_VECTOR (31 downto 0) := "00110100101100001011110010110101";
    constant ap_const_lv32_391C0CB3 : STD_LOGIC_VECTOR (31 downto 0) := "00111001000111000000110010110011";
    constant ap_const_lv32_4ED8AA4A : STD_LOGIC_VECTOR (31 downto 0) := "01001110110110001010101001001010";
    constant ap_const_lv32_5B9CCA4F : STD_LOGIC_VECTOR (31 downto 0) := "01011011100111001100101001001111";
    constant ap_const_lv32_682E6FF3 : STD_LOGIC_VECTOR (31 downto 0) := "01101000001011100110111111110011";
    constant ap_const_lv32_748F82EE : STD_LOGIC_VECTOR (31 downto 0) := "01110100100011111000001011101110";
    constant ap_const_lv32_78A5636F : STD_LOGIC_VECTOR (31 downto 0) := "01111000101001010110001101101111";
    constant ap_const_lv32_84C87814 : STD_LOGIC_VECTOR (31 downto 0) := "10000100110010000111100000010100";
    constant ap_const_lv32_8CC70208 : STD_LOGIC_VECTOR (31 downto 0) := "10001100110001110000001000001000";
    constant ap_const_lv32_90BEFFFA : STD_LOGIC_VECTOR (31 downto 0) := "10010000101111101111111111111010";
    constant ap_const_lv32_A4506CEB : STD_LOGIC_VECTOR (31 downto 0) := "10100100010100000110110011101011";
    constant ap_const_lv32_BEF9A3F7 : STD_LOGIC_VECTOR (31 downto 0) := "10111110111110011010001111110111";
    constant ap_const_lv32_C67178F2 : STD_LOGIC_VECTOR (31 downto 0) := "11000110011100010111100011110010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln682_reg_1021 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln682_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal w_strm_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln600_fu_461_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln600_reg_1025 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_fu_246 : STD_LOGIC_VECTOR (6 downto 0);
    signal t_2_fu_455_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_t_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_1_fu_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_1_fu_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_1_fu_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_1_fu_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal Kt_fu_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal Kt_1_fu_752_p66 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_fu_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_2_fu_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_1_fu_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_2_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_2_fu_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln580_fu_511_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_fu_501_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln580_1_fu_525_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln580_1_fu_515_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal xor_ln580_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln580_2_fu_539_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln580_2_fu_529_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln580_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln580_1_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_549_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln580_1_fu_557_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln580_2_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln580_2_fu_577_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln580_1_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln580_3_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln580_1_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln580_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln580_2_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal T1_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln591_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln581_fu_637_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln1_fu_627_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln581_1_fu_651_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln581_1_fu_641_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal and_ln591_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln591_1_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln581_2_fu_665_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln581_2_fu_655_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1_fu_693_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln591_1_fu_701_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln591_2_fu_723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln591_2_fu_715_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln591_1_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln591_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln591_3_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Kt_1_fu_752_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_module_mux_64_6_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (31 downto 0);
        din37 : IN STD_LOGIC_VECTOR (31 downto 0);
        din38 : IN STD_LOGIC_VECTOR (31 downto 0);
        din39 : IN STD_LOGIC_VECTOR (31 downto 0);
        din40 : IN STD_LOGIC_VECTOR (31 downto 0);
        din41 : IN STD_LOGIC_VECTOR (31 downto 0);
        din42 : IN STD_LOGIC_VECTOR (31 downto 0);
        din43 : IN STD_LOGIC_VECTOR (31 downto 0);
        din44 : IN STD_LOGIC_VECTOR (31 downto 0);
        din45 : IN STD_LOGIC_VECTOR (31 downto 0);
        din46 : IN STD_LOGIC_VECTOR (31 downto 0);
        din47 : IN STD_LOGIC_VECTOR (31 downto 0);
        din48 : IN STD_LOGIC_VECTOR (31 downto 0);
        din49 : IN STD_LOGIC_VECTOR (31 downto 0);
        din50 : IN STD_LOGIC_VECTOR (31 downto 0);
        din51 : IN STD_LOGIC_VECTOR (31 downto 0);
        din52 : IN STD_LOGIC_VECTOR (31 downto 0);
        din53 : IN STD_LOGIC_VECTOR (31 downto 0);
        din54 : IN STD_LOGIC_VECTOR (31 downto 0);
        din55 : IN STD_LOGIC_VECTOR (31 downto 0);
        din56 : IN STD_LOGIC_VECTOR (31 downto 0);
        din57 : IN STD_LOGIC_VECTOR (31 downto 0);
        din58 : IN STD_LOGIC_VECTOR (31 downto 0);
        din59 : IN STD_LOGIC_VECTOR (31 downto 0);
        din60 : IN STD_LOGIC_VECTOR (31 downto 0);
        din61 : IN STD_LOGIC_VECTOR (31 downto 0);
        din62 : IN STD_LOGIC_VECTOR (31 downto 0);
        din63 : IN STD_LOGIC_VECTOR (31 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_module_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_64_6_32_1_1_U131 : component top_module_mux_64_6_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 32,
        din34_WIDTH => 32,
        din35_WIDTH => 32,
        din36_WIDTH => 32,
        din37_WIDTH => 32,
        din38_WIDTH => 32,
        din39_WIDTH => 32,
        din40_WIDTH => 32,
        din41_WIDTH => 32,
        din42_WIDTH => 32,
        din43_WIDTH => 32,
        din44_WIDTH => 32,
        din45_WIDTH => 32,
        din46_WIDTH => 32,
        din47_WIDTH => 32,
        din48_WIDTH => 32,
        din49_WIDTH => 32,
        din50_WIDTH => 32,
        din51_WIDTH => 32,
        din52_WIDTH => 32,
        din53_WIDTH => 32,
        din54_WIDTH => 32,
        din55_WIDTH => 32,
        din56_WIDTH => 32,
        din57_WIDTH => 32,
        din58_WIDTH => 32,
        din59_WIDTH => 32,
        din60_WIDTH => 32,
        din61_WIDTH => 32,
        din62_WIDTH => 32,
        din63_WIDTH => 32,
        din64_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_428A2F98,
        din1 => ap_const_lv32_71374491,
        din2 => ap_const_lv32_B5C0FBCF,
        din3 => ap_const_lv32_E9B5DBA5,
        din4 => ap_const_lv32_3956C25B,
        din5 => ap_const_lv32_59F111F1,
        din6 => ap_const_lv32_923F82A4,
        din7 => ap_const_lv32_AB1C5ED5,
        din8 => ap_const_lv32_D807AA98,
        din9 => ap_const_lv32_12835B01,
        din10 => ap_const_lv32_243185BE,
        din11 => ap_const_lv32_550C7DC3,
        din12 => ap_const_lv32_72BE5D74,
        din13 => ap_const_lv32_80DEB1FE,
        din14 => ap_const_lv32_9BDC06A7,
        din15 => ap_const_lv32_C19BF174,
        din16 => ap_const_lv32_E49B69C1,
        din17 => ap_const_lv32_EFBE4786,
        din18 => ap_const_lv32_FC19DC6,
        din19 => ap_const_lv32_240CA1CC,
        din20 => ap_const_lv32_2DE92C6F,
        din21 => ap_const_lv32_4A7484AA,
        din22 => ap_const_lv32_5CB0A9DC,
        din23 => ap_const_lv32_76F988DA,
        din24 => ap_const_lv32_983E5152,
        din25 => ap_const_lv32_A831C66D,
        din26 => ap_const_lv32_B00327C8,
        din27 => ap_const_lv32_BF597FC7,
        din28 => ap_const_lv32_C6E00BF3,
        din29 => ap_const_lv32_D5A79147,
        din30 => ap_const_lv32_6CA6351,
        din31 => ap_const_lv32_14292967,
        din32 => ap_const_lv32_27B70A85,
        din33 => ap_const_lv32_2E1B2138,
        din34 => ap_const_lv32_4D2C6DFC,
        din35 => ap_const_lv32_53380D13,
        din36 => ap_const_lv32_650A7354,
        din37 => ap_const_lv32_766A0ABB,
        din38 => ap_const_lv32_81C2C92E,
        din39 => ap_const_lv32_92722C85,
        din40 => ap_const_lv32_A2BFE8A1,
        din41 => ap_const_lv32_A81A664B,
        din42 => ap_const_lv32_C24B8B70,
        din43 => ap_const_lv32_C76C51A3,
        din44 => ap_const_lv32_D192E819,
        din45 => ap_const_lv32_D6990624,
        din46 => ap_const_lv32_F40E3585,
        din47 => ap_const_lv32_106AA070,
        din48 => ap_const_lv32_19A4C116,
        din49 => ap_const_lv32_1E376C08,
        din50 => ap_const_lv32_2748774C,
        din51 => ap_const_lv32_34B0BCB5,
        din52 => ap_const_lv32_391C0CB3,
        din53 => ap_const_lv32_4ED8AA4A,
        din54 => ap_const_lv32_5B9CCA4F,
        din55 => ap_const_lv32_682E6FF3,
        din56 => ap_const_lv32_748F82EE,
        din57 => ap_const_lv32_78A5636F,
        din58 => ap_const_lv32_84C87814,
        din59 => ap_const_lv32_8CC70208,
        din60 => ap_const_lv32_90BEFFFA,
        din61 => ap_const_lv32_A4506CEB,
        din62 => ap_const_lv32_BEF9A3F7,
        din63 => ap_const_lv32_C67178F2,
        din64 => Kt_1_fu_752_p65,
        dout => Kt_1_fu_752_p66);

    flow_control_loop_pipe_sequential_init_U : component top_module_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    Kt_fu_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    Kt_fu_266 <= ap_const_lv32_428A2F98;
                elsif (((icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    Kt_fu_266 <= Kt_1_fu_752_p66;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    b_1_fu_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    b_1_fu_270 <= a;
                elsif (((icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    b_1_fu_270 <= a_2_fu_741_p2;
                end if;
            end if; 
        end if;
    end process;

    c_1_fu_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_1_fu_250 <= b;
                elsif (((icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    c_1_fu_250 <= b_1_fu_270;
                end if;
            end if; 
        end if;
    end process;

    d_1_fu_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    d_1_fu_254 <= d;
                elsif (((icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    d_1_fu_254 <= d_2_fu_274;
                end if;
            end if; 
        end if;
    end process;

    d_2_fu_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    d_2_fu_274 <= c;
                elsif (((icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    d_2_fu_274 <= c_1_fu_250;
                end if;
            end if; 
        end if;
    end process;

    f_1_fu_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    f_1_fu_278 <= e;
                elsif (((icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    f_1_fu_278 <= e_2_fu_669_p2;
                end if;
            end if; 
        end if;
    end process;

    g_1_fu_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    g_1_fu_258 <= f;
                elsif (((icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    g_1_fu_258 <= f_1_fu_278;
                end if;
            end if; 
        end if;
    end process;

    h_1_fu_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    h_1_fu_262 <= h;
                elsif (((icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    h_1_fu_262 <= h_2_fu_282;
                end if;
            end if; 
        end if;
    end process;

    h_2_fu_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    h_2_fu_282 <= g;
                elsif (((icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    h_2_fu_282 <= g_1_fu_258;
                end if;
            end if; 
        end if;
    end process;

    t_fu_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln682_fu_449_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    t_fu_246 <= t_2_fu_455_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    t_fu_246 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln682_reg_1021 <= icmp_ln682_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln682_fu_449_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln600_reg_1025 <= trunc_ln600_fu_461_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Kt_1_fu_752_p65 <= std_logic_vector(unsigned(trunc_ln600_reg_1025) + unsigned(ap_const_lv6_1));
    T1_fu_621_p2 <= std_logic_vector(unsigned(add_ln580_fu_615_p2) + unsigned(add_ln580_2_fu_609_p2));
    a_2_fu_741_p2 <= std_logic_vector(unsigned(add_ln591_fu_735_p2) + unsigned(xor_ln591_3_fu_729_p2));
    a_3_out <= b_1_fu_270;

    a_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln682_reg_1021, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln682_reg_1021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_3_out_ap_vld <= ap_const_logic_1;
        else 
            a_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln580_1_fu_603_p2 <= std_logic_vector(unsigned(Kt_fu_266) + unsigned(h_1_fu_262));
    add_ln580_2_fu_609_p2 <= std_logic_vector(unsigned(add_ln580_1_fu_603_p2) + unsigned(xor_ln580_3_fu_597_p2));
    add_ln580_fu_615_p2 <= std_logic_vector(unsigned(xor_ln580_1_fu_585_p2) + unsigned(w_strm_dout));
    add_ln591_fu_735_p2 <= std_logic_vector(unsigned(T1_fu_621_p2) + unsigned(xor_ln591_1_fu_709_p2));
    and_ln580_1_fu_571_p2 <= (xor_ln580_fu_543_p2 and h_2_fu_282);
    and_ln580_fu_565_p2 <= (g_1_fu_258 and f_1_fu_278);
    and_ln591_1_fu_687_p2 <= (d_2_fu_274 and c_1_fu_250);
    and_ln591_fu_681_p2 <= (xor_ln591_fu_675_p2 and b_1_fu_270);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, w_strm_empty_n, icmp_ln682_reg_1021)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln682_reg_1021 = ap_const_lv1_0) and (w_strm_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, w_strm_empty_n, icmp_ln682_reg_1021)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln682_reg_1021 = ap_const_lv1_0) and (w_strm_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, w_strm_empty_n, icmp_ln682_reg_1021)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln682_reg_1021 = ap_const_lv1_0) and (w_strm_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(w_strm_empty_n, icmp_ln682_reg_1021)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln682_reg_1021 = ap_const_lv1_0) and (w_strm_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln682_fu_449_p2)
    begin
        if (((icmp_ln682_fu_449_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_t_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, t_fu_246, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_t_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_t_1 <= t_fu_246;
        end if; 
    end process;

    b_3_out <= c_1_fu_250;

    b_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln682_reg_1021, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln682_reg_1021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_3_out_ap_vld <= ap_const_logic_1;
        else 
            b_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_3_out <= d_2_fu_274;

    c_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln682_reg_1021, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln682_reg_1021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_3_out_ap_vld <= ap_const_logic_1;
        else 
            c_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_1_out <= d_1_fu_254;

    d_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln682_reg_1021, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln682_reg_1021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_1_out_ap_vld <= ap_const_logic_1;
        else 
            d_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    e_2_fu_669_p2 <= std_logic_vector(unsigned(T1_fu_621_p2) + unsigned(d_1_fu_254));
    e_3_out <= f_1_fu_278;

    e_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln682_reg_1021, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln682_reg_1021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            e_3_out_ap_vld <= ap_const_logic_1;
        else 
            e_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    f_3_out <= g_1_fu_258;

    f_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln682_reg_1021, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln682_reg_1021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_3_out_ap_vld <= ap_const_logic_1;
        else 
            f_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    g_3_out <= h_2_fu_282;

    g_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln682_reg_1021, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln682_reg_1021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            g_3_out_ap_vld <= ap_const_logic_1;
        else 
            g_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_1_out <= h_1_fu_262;

    h_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln682_reg_1021, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln682_reg_1021 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            h_1_out_ap_vld <= ap_const_logic_1;
        else 
            h_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln682_fu_449_p2 <= "1" when (ap_sig_allocacmp_t_1 = ap_const_lv7_40) else "0";
    lshr_ln1_fu_627_p4 <= b_1_fu_270(31 downto 2);
    lshr_ln580_1_fu_515_p4 <= f_1_fu_278(31 downto 11);
    lshr_ln580_2_fu_529_p4 <= f_1_fu_278(31 downto 25);
    lshr_ln581_1_fu_641_p4 <= b_1_fu_270(31 downto 13);
    lshr_ln581_2_fu_655_p4 <= b_1_fu_270(31 downto 22);
    lshr_ln_fu_501_p4 <= f_1_fu_278(31 downto 6);
    or_ln1_fu_693_p3 <= (trunc_ln581_fu_637_p1 & lshr_ln1_fu_627_p4);
    or_ln580_1_fu_557_p3 <= (trunc_ln580_1_fu_525_p1 & lshr_ln580_1_fu_515_p4);
    or_ln580_2_fu_577_p3 <= (trunc_ln580_2_fu_539_p1 & lshr_ln580_2_fu_529_p4);
    or_ln591_1_fu_701_p3 <= (trunc_ln581_1_fu_651_p1 & lshr_ln581_1_fu_641_p4);
    or_ln591_2_fu_715_p3 <= (trunc_ln581_2_fu_665_p1 & lshr_ln581_2_fu_655_p4);
    or_ln_fu_549_p3 <= (trunc_ln580_fu_511_p1 & lshr_ln_fu_501_p4);
    t_2_fu_455_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_t_1) + unsigned(ap_const_lv7_1));
    trunc_ln580_1_fu_525_p1 <= f_1_fu_278(11 - 1 downto 0);
    trunc_ln580_2_fu_539_p1 <= f_1_fu_278(25 - 1 downto 0);
    trunc_ln580_fu_511_p1 <= f_1_fu_278(6 - 1 downto 0);
    trunc_ln581_1_fu_651_p1 <= b_1_fu_270(13 - 1 downto 0);
    trunc_ln581_2_fu_665_p1 <= b_1_fu_270(22 - 1 downto 0);
    trunc_ln581_fu_637_p1 <= b_1_fu_270(2 - 1 downto 0);
    trunc_ln600_fu_461_p1 <= ap_sig_allocacmp_t_1(6 - 1 downto 0);

    w_strm_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, w_strm_empty_n, icmp_ln682_reg_1021, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_strm_blk_n <= w_strm_empty_n;
        else 
            w_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    w_strm_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln682_reg_1021, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln682_reg_1021 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_strm_read <= ap_const_logic_1;
        else 
            w_strm_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln580_1_fu_585_p2 <= (and_ln580_fu_565_p2 xor and_ln580_1_fu_571_p2);
    xor_ln580_2_fu_591_p2 <= (or_ln_fu_549_p3 xor or_ln580_1_fu_557_p3);
    xor_ln580_3_fu_597_p2 <= (xor_ln580_2_fu_591_p2 xor or_ln580_2_fu_577_p3);
    xor_ln580_fu_543_p2 <= (f_1_fu_278 xor ap_const_lv32_FFFFFFFF);
    xor_ln591_1_fu_709_p2 <= (and_ln591_fu_681_p2 xor and_ln591_1_fu_687_p2);
    xor_ln591_2_fu_723_p2 <= (or_ln591_1_fu_701_p3 xor or_ln1_fu_693_p3);
    xor_ln591_3_fu_729_p2 <= (xor_ln591_2_fu_723_p2 xor or_ln591_2_fu_715_p3);
    xor_ln591_fu_675_p2 <= (d_2_fu_274 xor c_1_fu_250);
end behav;
