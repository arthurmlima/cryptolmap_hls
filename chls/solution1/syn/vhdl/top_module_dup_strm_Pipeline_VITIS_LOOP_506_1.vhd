-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_module_dup_strm_Pipeline_VITIS_LOOP_506_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    end_nblk_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    end_nblk_strm_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    end_nblk_strm_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    end_nblk_strm_empty_n : IN STD_LOGIC;
    end_nblk_strm_read : OUT STD_LOGIC;
    nblk_strm_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    nblk_strm_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    nblk_strm_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    nblk_strm_empty_n : IN STD_LOGIC;
    nblk_strm_read : OUT STD_LOGIC;
    nblk_strm1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    nblk_strm1_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    nblk_strm1_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    nblk_strm1_full_n : IN STD_LOGIC;
    nblk_strm1_write : OUT STD_LOGIC;
    end_nblk_strm1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    end_nblk_strm1_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    end_nblk_strm1_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    end_nblk_strm1_full_n : IN STD_LOGIC;
    end_nblk_strm1_write : OUT STD_LOGIC;
    nblk_strm2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    nblk_strm2_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    nblk_strm2_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    nblk_strm2_full_n : IN STD_LOGIC;
    nblk_strm2_write : OUT STD_LOGIC;
    end_nblk_strm2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    end_nblk_strm2_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    end_nblk_strm2_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    end_nblk_strm2_full_n : IN STD_LOGIC;
    end_nblk_strm2_write : OUT STD_LOGIC;
    e : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of top_module_dup_strm_Pipeline_VITIS_LOOP_506_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_phi_mux_e_6_phi_fu_109_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal e_6_reg_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal nblk_strm_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal nblk_strm1_blk_n : STD_LOGIC;
    signal end_nblk_strm1_blk_n : STD_LOGIC;
    signal nblk_strm2_blk_n : STD_LOGIC;
    signal end_nblk_strm2_blk_n : STD_LOGIC;
    signal end_nblk_strm_blk_n : STD_LOGIC;
    signal e_7_reg_117 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_173 : BOOLEAN;
    signal ap_condition_178 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component top_module_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component top_module_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    e_6_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_178)) then 
                    e_6_reg_106 <= e_7_reg_117;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    e_6_reg_106 <= e;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_e_6_phi_fu_109_p4 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                e_7_reg_117 <= end_nblk_strm_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, end_nblk_strm_empty_n, ap_phi_mux_e_6_phi_fu_109_p4, nblk_strm_empty_n, e_6_reg_106, nblk_strm1_full_n, end_nblk_strm1_full_n, nblk_strm2_full_n, end_nblk_strm2_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((end_nblk_strm2_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((nblk_strm2_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((end_nblk_strm1_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((nblk_strm1_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((e_6_reg_106 = ap_const_lv1_0) and (nblk_strm_empty_n = ap_const_logic_0)))) or ((ap_phi_mux_e_6_phi_fu_109_p4 = ap_const_lv1_0) and (end_nblk_strm_empty_n = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, end_nblk_strm_empty_n, ap_phi_mux_e_6_phi_fu_109_p4, nblk_strm_empty_n, e_6_reg_106, nblk_strm1_full_n, end_nblk_strm1_full_n, nblk_strm2_full_n, end_nblk_strm2_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((end_nblk_strm2_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((nblk_strm2_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((end_nblk_strm1_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((nblk_strm1_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((e_6_reg_106 = ap_const_lv1_0) and (nblk_strm_empty_n = ap_const_logic_0)))) or ((ap_phi_mux_e_6_phi_fu_109_p4 = ap_const_lv1_0) and (end_nblk_strm_empty_n = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, end_nblk_strm_empty_n, ap_phi_mux_e_6_phi_fu_109_p4, nblk_strm_empty_n, e_6_reg_106, nblk_strm1_full_n, end_nblk_strm1_full_n, nblk_strm2_full_n, end_nblk_strm2_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((end_nblk_strm2_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((nblk_strm2_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((end_nblk_strm1_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((nblk_strm1_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((e_6_reg_106 = ap_const_lv1_0) and (nblk_strm_empty_n = ap_const_logic_0)))) or ((ap_phi_mux_e_6_phi_fu_109_p4 = ap_const_lv1_0) and (end_nblk_strm_empty_n = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(end_nblk_strm_empty_n, ap_phi_mux_e_6_phi_fu_109_p4)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_phi_mux_e_6_phi_fu_109_p4 = ap_const_lv1_0) and (end_nblk_strm_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(nblk_strm_empty_n, e_6_reg_106, nblk_strm1_full_n, end_nblk_strm1_full_n, nblk_strm2_full_n, end_nblk_strm2_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((end_nblk_strm2_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((nblk_strm2_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((end_nblk_strm1_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((nblk_strm1_full_n = ap_const_logic_0) and (e_6_reg_106 = ap_const_lv1_0)) or ((e_6_reg_106 = ap_const_lv1_0) and (nblk_strm_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_173_assign_proc : process(ap_enable_reg_pp0_iter1, e_6_reg_106, ap_block_pp0_stage0)
    begin
                ap_condition_173 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_178_assign_proc : process(ap_enable_reg_pp0_iter1, e_6_reg_106, ap_block_pp0_stage0_11001)
    begin
                ap_condition_178 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_e_6_phi_fu_109_p4, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_phi_mux_e_6_phi_fu_109_p4 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_e_6_phi_fu_109_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, e, e_7_reg_117, ap_loop_init, ap_condition_173)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_173)) then 
                ap_phi_mux_e_6_phi_fu_109_p4 <= e_7_reg_117;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_e_6_phi_fu_109_p4 <= e;
            else 
                ap_phi_mux_e_6_phi_fu_109_p4 <= e_7_reg_117;
            end if;
        else 
            ap_phi_mux_e_6_phi_fu_109_p4 <= e_7_reg_117;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    end_nblk_strm1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, e_6_reg_106, end_nblk_strm1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            end_nblk_strm1_blk_n <= end_nblk_strm1_full_n;
        else 
            end_nblk_strm1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    end_nblk_strm1_din <= ap_const_lv1_0;

    end_nblk_strm1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, e_6_reg_106, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            end_nblk_strm1_write <= ap_const_logic_1;
        else 
            end_nblk_strm1_write <= ap_const_logic_0;
        end if; 
    end process;


    end_nblk_strm2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, e_6_reg_106, end_nblk_strm2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            end_nblk_strm2_blk_n <= end_nblk_strm2_full_n;
        else 
            end_nblk_strm2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    end_nblk_strm2_din <= ap_const_lv1_0;

    end_nblk_strm2_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, e_6_reg_106, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            end_nblk_strm2_write <= ap_const_logic_1;
        else 
            end_nblk_strm2_write <= ap_const_logic_0;
        end if; 
    end process;


    end_nblk_strm_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, end_nblk_strm_empty_n, ap_phi_mux_e_6_phi_fu_109_p4, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_phi_mux_e_6_phi_fu_109_p4 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            end_nblk_strm_blk_n <= end_nblk_strm_empty_n;
        else 
            end_nblk_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    end_nblk_strm_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_e_6_phi_fu_109_p4, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_e_6_phi_fu_109_p4 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            end_nblk_strm_read <= ap_const_logic_1;
        else 
            end_nblk_strm_read <= ap_const_logic_0;
        end if; 
    end process;


    nblk_strm1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, e_6_reg_106, nblk_strm1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nblk_strm1_blk_n <= nblk_strm1_full_n;
        else 
            nblk_strm1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    nblk_strm1_din <= nblk_strm_dout;

    nblk_strm1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, e_6_reg_106, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nblk_strm1_write <= ap_const_logic_1;
        else 
            nblk_strm1_write <= ap_const_logic_0;
        end if; 
    end process;


    nblk_strm2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, e_6_reg_106, nblk_strm2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nblk_strm2_blk_n <= nblk_strm2_full_n;
        else 
            nblk_strm2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    nblk_strm2_din <= nblk_strm_dout;

    nblk_strm2_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, e_6_reg_106, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nblk_strm2_write <= ap_const_logic_1;
        else 
            nblk_strm2_write <= ap_const_logic_0;
        end if; 
    end process;


    nblk_strm_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, nblk_strm_empty_n, e_6_reg_106, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nblk_strm_blk_n <= nblk_strm_empty_n;
        else 
            nblk_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    nblk_strm_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, e_6_reg_106, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (e_6_reg_106 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nblk_strm_read <= ap_const_logic_1;
        else 
            nblk_strm_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
