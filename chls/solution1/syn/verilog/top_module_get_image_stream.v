// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_module_get_image_stream (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        input_stream_TDATA,
        input_stream_TVALID,
        input_stream_TREADY,
        input_stream_TKEEP,
        input_stream_TSTRB,
        input_stream_TUSER,
        input_stream_TLAST,
        input_stream_TID,
        input_stream_TDEST,
        msg_strm_din,
        msg_strm_num_data_valid,
        msg_strm_fifo_cap,
        msg_strm_full_n,
        msg_strm_write,
        len_strm_din,
        len_strm_num_data_valid,
        len_strm_fifo_cap,
        len_strm_full_n,
        len_strm_write,
        end_len_strm_din,
        end_len_strm_num_data_valid,
        end_len_strm_fifo_cap,
        end_len_strm_full_n,
        end_len_strm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] input_stream_TDATA;
input   input_stream_TVALID;
output   input_stream_TREADY;
input  [7:0] input_stream_TKEEP;
input  [7:0] input_stream_TSTRB;
input  [0:0] input_stream_TUSER;
input  [0:0] input_stream_TLAST;
input  [0:0] input_stream_TID;
input  [0:0] input_stream_TDEST;
output  [63:0] msg_strm_din;
input  [15:0] msg_strm_num_data_valid;
input  [15:0] msg_strm_fifo_cap;
input   msg_strm_full_n;
output   msg_strm_write;
output  [63:0] len_strm_din;
input  [1:0] len_strm_num_data_valid;
input  [1:0] len_strm_fifo_cap;
input   len_strm_full_n;
output   len_strm_write;
output  [0:0] end_len_strm_din;
input  [1:0] end_len_strm_num_data_valid;
input  [1:0] end_len_strm_fifo_cap;
input   end_len_strm_full_n;
output   end_len_strm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg msg_strm_write;
reg len_strm_write;
reg[0:0] end_len_strm_din;
reg end_len_strm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    len_strm_blk_n;
wire    ap_CS_fsm_state4;
reg    end_len_strm_blk_n;
wire    ap_CS_fsm_state5;
wire    grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_start;
wire    grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_done;
wire    grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_idle;
wire    grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_ready;
wire   [63:0] grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_msg_strm_din;
wire    grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_msg_strm_write;
wire    grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_input_stream_TREADY;
reg    grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state4;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    regslice_both_input_stream_V_data_V_U_apdone_blk;
wire   [63:0] input_stream_TDATA_int_regslice;
wire    input_stream_TVALID_int_regslice;
reg    input_stream_TREADY_int_regslice;
wire    regslice_both_input_stream_V_data_V_U_ack_in;
wire    regslice_both_input_stream_V_keep_V_U_apdone_blk;
wire   [7:0] input_stream_TKEEP_int_regslice;
wire    regslice_both_input_stream_V_keep_V_U_vld_out;
wire    regslice_both_input_stream_V_keep_V_U_ack_in;
wire    regslice_both_input_stream_V_strb_V_U_apdone_blk;
wire   [7:0] input_stream_TSTRB_int_regslice;
wire    regslice_both_input_stream_V_strb_V_U_vld_out;
wire    regslice_both_input_stream_V_strb_V_U_ack_in;
wire    regslice_both_input_stream_V_user_V_U_apdone_blk;
wire   [0:0] input_stream_TUSER_int_regslice;
wire    regslice_both_input_stream_V_user_V_U_vld_out;
wire    regslice_both_input_stream_V_user_V_U_ack_in;
wire    regslice_both_input_stream_V_last_V_U_apdone_blk;
wire   [0:0] input_stream_TLAST_int_regslice;
wire    regslice_both_input_stream_V_last_V_U_vld_out;
wire    regslice_both_input_stream_V_last_V_U_ack_in;
wire    regslice_both_input_stream_V_id_V_U_apdone_blk;
wire   [0:0] input_stream_TID_int_regslice;
wire    regslice_both_input_stream_V_id_V_U_vld_out;
wire    regslice_both_input_stream_V_id_V_U_ack_in;
wire    regslice_both_input_stream_V_dest_V_U_apdone_blk;
wire   [0:0] input_stream_TDEST_int_regslice;
wire    regslice_both_input_stream_V_dest_V_U_vld_out;
wire    regslice_both_input_stream_V_dest_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_start_reg = 1'b0;
end

top_module_get_image_stream_Pipeline_VITIS_LOOP_16_1 grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_start),
    .ap_done(grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_done),
    .ap_idle(grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_idle),
    .ap_ready(grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_ready),
    .input_stream_TVALID(input_stream_TVALID_int_regslice),
    .msg_strm_din(grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_msg_strm_din),
    .msg_strm_num_data_valid(16'd0),
    .msg_strm_fifo_cap(16'd0),
    .msg_strm_full_n(msg_strm_full_n),
    .msg_strm_write(grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_msg_strm_write),
    .input_stream_TDATA(input_stream_TDATA_int_regslice),
    .input_stream_TREADY(grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_input_stream_TREADY),
    .input_stream_TKEEP(input_stream_TKEEP_int_regslice),
    .input_stream_TSTRB(input_stream_TSTRB_int_regslice),
    .input_stream_TUSER(input_stream_TUSER_int_regslice),
    .input_stream_TLAST(input_stream_TLAST_int_regslice),
    .input_stream_TID(input_stream_TID_int_regslice),
    .input_stream_TDEST(input_stream_TDEST_int_regslice)
);

top_module_regslice_both #(
    .DataWidth( 64 ))
regslice_both_input_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TDATA),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_data_V_U_ack_in),
    .data_out(input_stream_TDATA_int_regslice),
    .vld_out(input_stream_TVALID_int_regslice),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_data_V_U_apdone_blk)
);

top_module_regslice_both #(
    .DataWidth( 8 ))
regslice_both_input_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TKEEP),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_keep_V_U_ack_in),
    .data_out(input_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_input_stream_V_keep_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_keep_V_U_apdone_blk)
);

top_module_regslice_both #(
    .DataWidth( 8 ))
regslice_both_input_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TSTRB),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_strb_V_U_ack_in),
    .data_out(input_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_input_stream_V_strb_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_strb_V_U_apdone_blk)
);

top_module_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_stream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TUSER),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_user_V_U_ack_in),
    .data_out(input_stream_TUSER_int_regslice),
    .vld_out(regslice_both_input_stream_V_user_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_user_V_U_apdone_blk)
);

top_module_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TLAST),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_last_V_U_ack_in),
    .data_out(input_stream_TLAST_int_regslice),
    .vld_out(regslice_both_input_stream_V_last_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_last_V_U_apdone_blk)
);

top_module_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_stream_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TID),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_id_V_U_ack_in),
    .data_out(input_stream_TID_int_regslice),
    .vld_out(regslice_both_input_stream_V_id_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_id_V_U_apdone_blk)
);

top_module_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_stream_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TDEST),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_dest_V_U_ack_in),
    .data_out(input_stream_TDEST_int_regslice),
    .vld_out(regslice_both_input_stream_V_dest_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((end_len_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_start_reg <= 1'b1;
        end else if ((grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_ready == 1'b1)) begin
            grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((end_len_strm_full_n == 1'b0) | (len_strm_full_n == 1'b0))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((end_len_strm_full_n == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((end_len_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        end_len_strm_blk_n = end_len_strm_full_n;
    end else begin
        end_len_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((end_len_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        end_len_strm_din = 1'd1;
    end else if ((~((end_len_strm_full_n == 1'b0) | (len_strm_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        end_len_strm_din = 1'd0;
    end else begin
        end_len_strm_din = 'bx;
    end
end

always @ (*) begin
    if ((((end_len_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | (~((end_len_strm_full_n == 1'b0) | (len_strm_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        end_len_strm_write = 1'b1;
    end else begin
        end_len_strm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_stream_TREADY_int_regslice = grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_input_stream_TREADY;
    end else begin
        input_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((end_len_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        len_strm_blk_n = len_strm_full_n;
    end else begin
        len_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((end_len_strm_full_n == 1'b0) | (len_strm_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        len_strm_write = 1'b1;
    end else begin
        len_strm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        msg_strm_write = grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_msg_strm_write;
    end else begin
        msg_strm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((end_len_strm_full_n == 1'b0) | (len_strm_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((end_len_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((end_len_strm_full_n == 1'b0) | (len_strm_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_start = grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_ap_start_reg;

assign input_stream_TREADY = regslice_both_input_stream_V_data_V_U_ack_in;

assign len_strm_din = 64'd262144;

assign msg_strm_din = grp_get_image_stream_Pipeline_VITIS_LOOP_16_1_fu_71_msg_strm_din;

assign start_out = real_start;

endmodule //top_module_get_image_stream
