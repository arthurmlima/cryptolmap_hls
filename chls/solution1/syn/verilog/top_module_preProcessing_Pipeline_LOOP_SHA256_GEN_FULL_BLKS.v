// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_module_preProcessing_Pipeline_LOOP_SHA256_GEN_FULL_BLKS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        msg_strm_dout,
        msg_strm_num_data_valid,
        msg_strm_fifo_cap,
        msg_strm_empty_n,
        msg_strm_read,
        trunc_ln,
        blk_strm_din,
        blk_strm_num_data_valid,
        blk_strm_fifo_cap,
        blk_strm_full_n,
        blk_strm_write
);

parameter    ap_ST_fsm_pp0_stage0 = 9'd1;
parameter    ap_ST_fsm_pp0_stage1 = 9'd2;
parameter    ap_ST_fsm_pp0_stage2 = 9'd4;
parameter    ap_ST_fsm_pp0_stage3 = 9'd8;
parameter    ap_ST_fsm_pp0_stage4 = 9'd16;
parameter    ap_ST_fsm_pp0_stage5 = 9'd32;
parameter    ap_ST_fsm_pp0_stage6 = 9'd64;
parameter    ap_ST_fsm_pp0_stage7 = 9'd128;
parameter    ap_ST_fsm_pp0_stage8 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] msg_strm_dout;
input  [15:0] msg_strm_num_data_valid;
input  [15:0] msg_strm_fifo_cap;
input   msg_strm_empty_n;
output   msg_strm_read;
input  [57:0] trunc_ln;
output  [511:0] blk_strm_din;
input  [13:0] blk_strm_num_data_valid;
input  [13:0] blk_strm_fifo_cap;
input   blk_strm_full_n;
output   blk_strm_write;

reg ap_idle;
reg msg_strm_read;
reg blk_strm_write;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln305_fu_181_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage8;
reg    ap_block_state9_pp0_stage8_iter0;
reg    ap_block_pp0_stage8_subdone;
reg    msg_strm_blk_n;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage0;
reg    blk_strm_blk_n;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] empty_fu_197_p1;
reg   [7:0] empty_reg_321;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
wire   [7:0] grp_fu_103_p4;
reg   [7:0] conv15_3_reg_326;
wire   [7:0] grp_fu_113_p4;
reg   [7:0] conv15_1_reg_331;
wire   [7:0] grp_fu_123_p4;
reg   [7:0] conv15_2_reg_336;
wire   [7:0] grp_fu_133_p4;
reg   [7:0] conv36_0_reg_341;
wire   [7:0] grp_fu_143_p4;
reg   [7:0] conv36_3_reg_346;
wire   [7:0] grp_fu_153_p4;
reg   [7:0] conv36_1_reg_351;
wire   [7:0] grp_fu_163_p4;
reg   [7:0] conv36_2_reg_356;
wire   [7:0] empty_84_fu_201_p1;
reg   [7:0] empty_84_reg_361;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg   [7:0] conv15_1_3_reg_366;
reg   [7:0] conv15_1_1_reg_371;
reg   [7:0] conv15_1_2_reg_376;
reg   [7:0] conv36_1_0_reg_381;
reg   [7:0] conv36_1_3_reg_386;
reg   [7:0] conv36_1_1_reg_391;
reg   [7:0] conv36_1_2_reg_396;
wire   [7:0] empty_85_fu_205_p1;
reg   [7:0] empty_85_reg_401;
reg    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg   [7:0] conv15_2_3_reg_406;
reg   [7:0] conv15_2_1_reg_411;
reg   [7:0] conv15_2_2_reg_416;
reg   [7:0] conv36_2_0_reg_421;
reg   [7:0] conv36_2_3_reg_426;
reg   [7:0] conv36_2_1_reg_431;
reg   [7:0] conv36_2_2_reg_436;
wire   [7:0] empty_86_fu_209_p1;
reg   [7:0] empty_86_reg_441;
reg    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg   [7:0] conv15_3_3_reg_446;
reg   [7:0] conv15_3_1_reg_451;
reg   [7:0] conv15_3_2_reg_456;
reg   [7:0] conv36_3_0_reg_461;
reg   [7:0] conv36_3_3_reg_466;
reg   [7:0] conv36_3_1_reg_471;
reg   [7:0] conv36_3_2_reg_476;
wire   [7:0] empty_87_fu_213_p1;
reg   [7:0] empty_87_reg_481;
reg    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg   [7:0] conv15_4_3_reg_486;
reg   [7:0] conv15_4_1_reg_491;
reg   [7:0] conv15_4_2_reg_496;
reg   [7:0] conv36_4_0_reg_501;
reg   [7:0] conv36_4_3_reg_506;
reg   [7:0] conv36_4_1_reg_511;
reg   [7:0] conv36_4_2_reg_516;
wire   [7:0] empty_88_fu_217_p1;
reg   [7:0] empty_88_reg_521;
reg    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
reg   [7:0] conv15_5_3_reg_526;
reg   [7:0] conv15_5_1_reg_531;
reg   [7:0] conv15_5_2_reg_536;
reg   [7:0] conv36_5_0_reg_541;
reg   [7:0] conv36_5_3_reg_546;
reg   [7:0] conv36_5_1_reg_551;
reg   [7:0] conv36_5_2_reg_556;
wire   [7:0] empty_89_fu_221_p1;
reg   [7:0] empty_89_reg_561;
reg    ap_block_pp0_stage8_11001;
reg   [7:0] conv15_6_3_reg_566;
reg   [7:0] conv15_6_1_reg_571;
reg   [7:0] conv15_6_2_reg_576;
reg   [7:0] conv36_6_0_reg_581;
reg   [7:0] conv36_6_3_reg_586;
reg   [7:0] conv36_6_1_reg_591;
reg   [7:0] conv36_6_2_reg_596;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg   [57:0] j_fu_80;
wire   [57:0] j_2_fu_186_p2;
wire    ap_block_pp0_stage1_11001;
wire    ap_loop_init;
wire    ap_block_pp0_stage1;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] empty_90_fu_225_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_module_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_80 <= 58'd0;
    end else if (((icmp_ln305_fu_181_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_fu_80 <= j_2_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        conv15_1_1_reg_371 <= {{msg_strm_dout[15:8]}};
        conv15_1_2_reg_376 <= {{msg_strm_dout[23:16]}};
        conv15_1_3_reg_366 <= {{msg_strm_dout[31:24]}};
        conv36_1_0_reg_381 <= {{msg_strm_dout[39:32]}};
        conv36_1_1_reg_391 <= {{msg_strm_dout[47:40]}};
        conv36_1_2_reg_396 <= {{msg_strm_dout[55:48]}};
        conv36_1_3_reg_386 <= {{msg_strm_dout[63:56]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        conv15_1_reg_331 <= {{msg_strm_dout[15:8]}};
        conv15_2_reg_336 <= {{msg_strm_dout[23:16]}};
        conv15_3_reg_326 <= {{msg_strm_dout[31:24]}};
        conv36_0_reg_341 <= {{msg_strm_dout[39:32]}};
        conv36_1_reg_351 <= {{msg_strm_dout[47:40]}};
        conv36_2_reg_356 <= {{msg_strm_dout[55:48]}};
        conv36_3_reg_346 <= {{msg_strm_dout[63:56]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        conv15_2_1_reg_411 <= {{msg_strm_dout[15:8]}};
        conv15_2_2_reg_416 <= {{msg_strm_dout[23:16]}};
        conv15_2_3_reg_406 <= {{msg_strm_dout[31:24]}};
        conv36_2_0_reg_421 <= {{msg_strm_dout[39:32]}};
        conv36_2_1_reg_431 <= {{msg_strm_dout[47:40]}};
        conv36_2_2_reg_436 <= {{msg_strm_dout[55:48]}};
        conv36_2_3_reg_426 <= {{msg_strm_dout[63:56]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        conv15_3_1_reg_451 <= {{msg_strm_dout[15:8]}};
        conv15_3_2_reg_456 <= {{msg_strm_dout[23:16]}};
        conv15_3_3_reg_446 <= {{msg_strm_dout[31:24]}};
        conv36_3_0_reg_461 <= {{msg_strm_dout[39:32]}};
        conv36_3_1_reg_471 <= {{msg_strm_dout[47:40]}};
        conv36_3_2_reg_476 <= {{msg_strm_dout[55:48]}};
        conv36_3_3_reg_466 <= {{msg_strm_dout[63:56]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        conv15_4_1_reg_491 <= {{msg_strm_dout[15:8]}};
        conv15_4_2_reg_496 <= {{msg_strm_dout[23:16]}};
        conv15_4_3_reg_486 <= {{msg_strm_dout[31:24]}};
        conv36_4_0_reg_501 <= {{msg_strm_dout[39:32]}};
        conv36_4_1_reg_511 <= {{msg_strm_dout[47:40]}};
        conv36_4_2_reg_516 <= {{msg_strm_dout[55:48]}};
        conv36_4_3_reg_506 <= {{msg_strm_dout[63:56]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        conv15_5_1_reg_531 <= {{msg_strm_dout[15:8]}};
        conv15_5_2_reg_536 <= {{msg_strm_dout[23:16]}};
        conv15_5_3_reg_526 <= {{msg_strm_dout[31:24]}};
        conv36_5_0_reg_541 <= {{msg_strm_dout[39:32]}};
        conv36_5_1_reg_551 <= {{msg_strm_dout[47:40]}};
        conv36_5_2_reg_556 <= {{msg_strm_dout[55:48]}};
        conv36_5_3_reg_546 <= {{msg_strm_dout[63:56]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        conv15_6_1_reg_571 <= {{msg_strm_dout[15:8]}};
        conv15_6_2_reg_576 <= {{msg_strm_dout[23:16]}};
        conv15_6_3_reg_566 <= {{msg_strm_dout[31:24]}};
        conv36_6_0_reg_581 <= {{msg_strm_dout[39:32]}};
        conv36_6_1_reg_591 <= {{msg_strm_dout[47:40]}};
        conv36_6_2_reg_596 <= {{msg_strm_dout[55:48]}};
        conv36_6_3_reg_586 <= {{msg_strm_dout[63:56]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        empty_84_reg_361 <= empty_84_fu_201_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        empty_85_reg_401 <= empty_85_fu_205_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        empty_86_reg_441 <= empty_86_fu_209_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        empty_87_reg_481 <= empty_87_fu_213_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        empty_88_reg_521 <= empty_88_fu_217_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        empty_89_reg_561 <= empty_89_fu_221_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        empty_reg_321 <= empty_fu_197_p1;
    end
end

always @ (*) begin
    if (((icmp_ln305_fu_181_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        blk_strm_blk_n = blk_strm_full_n;
    end else begin
        blk_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        blk_strm_write = 1'b1;
    end else begin
        blk_strm_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        msg_strm_blk_n = msg_strm_empty_n;
    end else begin
        msg_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        msg_strm_read = 1'b1;
    end else begin
        msg_strm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((blk_strm_full_n == 1'b0) | (msg_strm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((blk_strm_full_n == 1'b0) | (msg_strm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((blk_strm_full_n == 1'b0) | (msg_strm_empty_n == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((msg_strm_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((blk_strm_full_n == 1'b0) | (msg_strm_empty_n == 1'b0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = (msg_strm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = (msg_strm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0 = (msg_strm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0 = (msg_strm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0 = (msg_strm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state8_pp0_stage7_iter0 = (msg_strm_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state9_pp0_stage8_iter0 = (msg_strm_empty_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign blk_strm_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{grp_fu_133_p4}, {grp_fu_153_p4}}, {grp_fu_163_p4}}, {grp_fu_143_p4}}, {empty_90_fu_225_p1}}, {grp_fu_113_p4}}, {grp_fu_123_p4}}, {grp_fu_103_p4}}, {conv36_6_0_reg_581}}, {conv36_6_1_reg_591}}, {conv36_6_2_reg_596}}, {conv36_6_3_reg_586}}, {empty_89_reg_561}}, {conv15_6_1_reg_571}}, {conv15_6_2_reg_576}}, {conv15_6_3_reg_566}}, {conv36_5_0_reg_541}}, {conv36_5_1_reg_551}}, {conv36_5_2_reg_556}}, {conv36_5_3_reg_546}}, {empty_88_reg_521}}, {conv15_5_1_reg_531}}, {conv15_5_2_reg_536}}, {conv15_5_3_reg_526}}, {conv36_4_0_reg_501}}, {conv36_4_1_reg_511}}, {conv36_4_2_reg_516}}, {conv36_4_3_reg_506}}, {empty_87_reg_481}}, {conv15_4_1_reg_491}}, {conv15_4_2_reg_496}}, {conv15_4_3_reg_486}}, {conv36_3_0_reg_461}}, {conv36_3_1_reg_471}}, {conv36_3_2_reg_476}}, {conv36_3_3_reg_466}}, {empty_86_reg_441}}, {conv15_3_1_reg_451}}, {conv15_3_2_reg_456}}, {conv15_3_3_reg_446}}, {conv36_2_0_reg_421}}, {conv36_2_1_reg_431}}, {conv36_2_2_reg_436}}, {conv36_2_3_reg_426}}, 
    {empty_85_reg_401}}, {conv15_2_1_reg_411}}, {conv15_2_2_reg_416}}, {conv15_2_3_reg_406}}, {conv36_1_0_reg_381}}, {conv36_1_1_reg_391}}, {conv36_1_2_reg_396}}, {conv36_1_3_reg_386}}, {empty_84_reg_361}}, {conv15_1_1_reg_371}}, {conv15_1_2_reg_376}}, {conv15_1_3_reg_366}}, {conv36_0_reg_341}}, {conv36_1_reg_351}}, {conv36_2_reg_356}}, {conv36_3_reg_346}}, {empty_reg_321}}, {conv15_1_reg_331}}, {conv15_2_reg_336}}, {conv15_3_reg_326}};

assign empty_84_fu_201_p1 = msg_strm_dout[7:0];

assign empty_85_fu_205_p1 = msg_strm_dout[7:0];

assign empty_86_fu_209_p1 = msg_strm_dout[7:0];

assign empty_87_fu_213_p1 = msg_strm_dout[7:0];

assign empty_88_fu_217_p1 = msg_strm_dout[7:0];

assign empty_89_fu_221_p1 = msg_strm_dout[7:0];

assign empty_90_fu_225_p1 = msg_strm_dout[7:0];

assign empty_fu_197_p1 = msg_strm_dout[7:0];

assign grp_fu_103_p4 = {{msg_strm_dout[31:24]}};

assign grp_fu_113_p4 = {{msg_strm_dout[15:8]}};

assign grp_fu_123_p4 = {{msg_strm_dout[23:16]}};

assign grp_fu_133_p4 = {{msg_strm_dout[39:32]}};

assign grp_fu_143_p4 = {{msg_strm_dout[63:56]}};

assign grp_fu_153_p4 = {{msg_strm_dout[47:40]}};

assign grp_fu_163_p4 = {{msg_strm_dout[55:48]}};

assign icmp_ln305_fu_181_p2 = ((j_fu_80 == trunc_ln) ? 1'b1 : 1'b0);

assign j_2_fu_186_p2 = (j_fu_80 + 58'd1);

endmodule //top_module_preProcessing_Pipeline_LOOP_SHA256_GEN_FULL_BLKS
