// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_module_dup_strm_Pipeline_VITIS_LOOP_506_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        end_nblk_strm_dout,
        end_nblk_strm_num_data_valid,
        end_nblk_strm_fifo_cap,
        end_nblk_strm_empty_n,
        end_nblk_strm_read,
        nblk_strm_dout,
        nblk_strm_num_data_valid,
        nblk_strm_fifo_cap,
        nblk_strm_empty_n,
        nblk_strm_read,
        nblk_strm1_din,
        nblk_strm1_num_data_valid,
        nblk_strm1_fifo_cap,
        nblk_strm1_full_n,
        nblk_strm1_write,
        end_nblk_strm1_din,
        end_nblk_strm1_num_data_valid,
        end_nblk_strm1_fifo_cap,
        end_nblk_strm1_full_n,
        end_nblk_strm1_write,
        nblk_strm2_din,
        nblk_strm2_num_data_valid,
        nblk_strm2_fifo_cap,
        nblk_strm2_full_n,
        nblk_strm2_write,
        end_nblk_strm2_din,
        end_nblk_strm2_num_data_valid,
        end_nblk_strm2_fifo_cap,
        end_nblk_strm2_full_n,
        end_nblk_strm2_write,
        e
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] end_nblk_strm_dout;
input  [5:0] end_nblk_strm_num_data_valid;
input  [5:0] end_nblk_strm_fifo_cap;
input   end_nblk_strm_empty_n;
output   end_nblk_strm_read;
input  [63:0] nblk_strm_dout;
input  [5:0] nblk_strm_num_data_valid;
input  [5:0] nblk_strm_fifo_cap;
input   nblk_strm_empty_n;
output   nblk_strm_read;
output  [63:0] nblk_strm1_din;
input  [5:0] nblk_strm1_num_data_valid;
input  [5:0] nblk_strm1_fifo_cap;
input   nblk_strm1_full_n;
output   nblk_strm1_write;
output  [0:0] end_nblk_strm1_din;
input  [5:0] end_nblk_strm1_num_data_valid;
input  [5:0] end_nblk_strm1_fifo_cap;
input   end_nblk_strm1_full_n;
output   end_nblk_strm1_write;
output  [63:0] nblk_strm2_din;
input  [5:0] nblk_strm2_num_data_valid;
input  [5:0] nblk_strm2_fifo_cap;
input   nblk_strm2_full_n;
output   nblk_strm2_write;
output  [0:0] end_nblk_strm2_din;
input  [5:0] end_nblk_strm2_num_data_valid;
input  [5:0] end_nblk_strm2_fifo_cap;
input   end_nblk_strm2_full_n;
output   end_nblk_strm2_write;
input  [0:0] e;

reg ap_idle;
reg end_nblk_strm_read;
reg nblk_strm_read;
reg nblk_strm1_write;
reg end_nblk_strm1_write;
reg nblk_strm2_write;
reg end_nblk_strm2_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg   [0:0] ap_phi_mux_e_6_phi_fu_109_p4;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] e_6_reg_106;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    nblk_strm_blk_n;
wire    ap_block_pp0_stage0;
reg    nblk_strm1_blk_n;
reg    end_nblk_strm1_blk_n;
reg    nblk_strm2_blk_n;
reg    end_nblk_strm2_blk_n;
reg    end_nblk_strm_blk_n;
reg   [0:0] e_7_reg_117;
reg    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_173;
reg    ap_condition_178;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_module_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_178)) begin
            e_6_reg_106 <= e_7_reg_117;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            e_6_reg_106 <= e;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_e_6_phi_fu_109_p4 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_7_reg_117 <= end_nblk_strm_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_phi_mux_e_6_phi_fu_109_p4 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_173)) begin
            ap_phi_mux_e_6_phi_fu_109_p4 = e_7_reg_117;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_e_6_phi_fu_109_p4 = e;
        end else begin
            ap_phi_mux_e_6_phi_fu_109_p4 = e_7_reg_117;
        end
    end else begin
        ap_phi_mux_e_6_phi_fu_109_p4 = e_7_reg_117;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        end_nblk_strm1_blk_n = end_nblk_strm1_full_n;
    end else begin
        end_nblk_strm1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        end_nblk_strm1_write = 1'b1;
    end else begin
        end_nblk_strm1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        end_nblk_strm2_blk_n = end_nblk_strm2_full_n;
    end else begin
        end_nblk_strm2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        end_nblk_strm2_write = 1'b1;
    end else begin
        end_nblk_strm2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_phi_mux_e_6_phi_fu_109_p4 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        end_nblk_strm_blk_n = end_nblk_strm_empty_n;
    end else begin
        end_nblk_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_e_6_phi_fu_109_p4 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        end_nblk_strm_read = 1'b1;
    end else begin
        end_nblk_strm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nblk_strm1_blk_n = nblk_strm1_full_n;
    end else begin
        nblk_strm1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nblk_strm1_write = 1'b1;
    end else begin
        nblk_strm1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nblk_strm2_blk_n = nblk_strm2_full_n;
    end else begin
        nblk_strm2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nblk_strm2_write = 1'b1;
    end else begin
        nblk_strm2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nblk_strm_blk_n = nblk_strm_empty_n;
    end else begin
        nblk_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nblk_strm_read = 1'b1;
    end else begin
        nblk_strm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((end_nblk_strm2_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((nblk_strm2_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((end_nblk_strm1_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((nblk_strm1_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((e_6_reg_106 == 1'd0) & (nblk_strm_empty_n == 1'b0)))) | ((ap_phi_mux_e_6_phi_fu_109_p4 == 1'd0) & (end_nblk_strm_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((end_nblk_strm2_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((nblk_strm2_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((end_nblk_strm1_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((nblk_strm1_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((e_6_reg_106 == 1'd0) & (nblk_strm_empty_n == 1'b0)))) | ((ap_phi_mux_e_6_phi_fu_109_p4 == 1'd0) & (end_nblk_strm_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((end_nblk_strm2_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((nblk_strm2_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((end_nblk_strm1_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((nblk_strm1_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((e_6_reg_106 == 1'd0) & (nblk_strm_empty_n == 1'b0)))) | ((ap_phi_mux_e_6_phi_fu_109_p4 == 1'd0) & (end_nblk_strm_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_phi_mux_e_6_phi_fu_109_p4 == 1'd0) & (end_nblk_strm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((end_nblk_strm2_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((nblk_strm2_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((end_nblk_strm1_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((nblk_strm1_full_n == 1'b0) & (e_6_reg_106 == 1'd0)) | ((e_6_reg_106 == 1'd0) & (nblk_strm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_173 = ((1'b0 == ap_block_pp0_stage0) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_178 = ((1'b0 == ap_block_pp0_stage0_11001) & (e_6_reg_106 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign end_nblk_strm1_din = 1'd0;

assign end_nblk_strm2_din = 1'd0;

assign nblk_strm1_din = nblk_strm_dout;

assign nblk_strm2_din = nblk_strm_dout;

endmodule //top_module_dup_strm_Pipeline_VITIS_LOOP_506_1
